# -*- coding: utf-8 -*-
"""
Created on Tue Oct 29 10:19:47 2024

@author: Maanas
"""

# imports

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy.optimize as op

plt.rcParams["figure.figsize"] = (10,8)

# params
time = 5 #in minutes
nrows = (time * 60) + 1

# device_number = 9
device_number = [2, 3, 4, 5, 6, 7, 8, 9]
# file = 'C:\\Users\Maanas\OneDrive - Imperial College London\Blackboard\Lab\Cycle 2\Data\Session1 - 29th Oct\\' + str(device_number) + ' high.csv'

def gaussian(x, amp, mu, sigma):
    return (amp * np.exp(-((x - mu) ** 2) / (2 * sigma** 2)))


def analysis(block = False, bins = 50):
    df = pd.DataFrame()
    for device in device_number:
        file = 'C:\\Users\Maanas\OneDrive - Imperial College London\Blackboard\Lab\Cycle 2\Data\Session2 - 31st Oct\Tripod calibration\\'  + str(device) + ' low.csv'
        title_name = file.split('calibration\\')[1].split('.csv')[0]

        data = pd.read_csv(file, nrows=nrows)
        df[str(device)+' temp'] = data[data.columns[1]]
        df[str(device)+' speed'] = data[data.columns[2]]
    df.set_index(data.index.values)

    selected_columns = df.iloc[:, 1::2] #speed
    # selected_columns = df.iloc[:, 0::2] #temp

    for i, column in enumerate(selected_columns.columns, start=1):
        plt.subplot(3, 3, i)
        plt.plot(df.index, df[column])
        plt.title(f"{column}")  
        plt.ylabel('speed (m/s)')
        plt.xlabel('time (sec)')

    plt.tight_layout()
    plt.show(block=block)
    plt.pause(2)
    plt.close()

    for i, column in enumerate(selected_columns.columns, start=1):
        plt.subplot(3, 3, i)
        plt.hist(df[column], bins = bins)
        plt.title(f"{column}")  
        plt.ylabel('speed (m/s)')
        plt.xlabel('time (sec)')

    plt.tight_layout()
    plt.show(block=block)
    plt.pause(2)
    plt.close()


    amp_list = []
    mu_list = []
    sigma_list = []

    for i, column in enumerate(selected_columns.columns, start=1):
        # hist = plt.hist(df[column], bins = bins)
        counts, bins_location = np.histogram(df[column], bins = bins)
        bin_midpoints = 0.5 * (bins_location[1:] + bins_location[:-1])

        a_guess = np.max(counts)
        m_guess = np.median(bin_midpoints)
        sig_guess = 0.5

        p0 = [a_guess,m_guess,sig_guess]

        fit,cov = op.curve_fit(gaussian, bin_midpoints, counts, p0, maxfev = 1000000000)
        # print("The parameters")
        # print(fit)
        # print('--'*45)
        # print('The covariance matrix')
        # print(cov)

        amp_list.append(fit[0])
        mu_list.append(fit[1])
        sigma_list.append(fit[2])

        curve_fit=gaussian(bin_midpoints, fit[0], fit[1], fit[2])

        scale = np.max(counts)/fit[0]
        plt.subplot(3, 3, i)
        plt.stairs(counts, bins_location, label = 'Data')
        plt.plot(bin_midpoints,curve_fit,color='black', label = 'Fit')
        plt.plot(bin_midpoints,scale*curve_fit,color='purple', label = 'Scaled')
        plt.legend()
    plt.tight_layout()
    plt.show(block=block)
    plt.pause(2)
    plt.close()

    # print(amp_list)
    # print('--'*45)
    # print(mu_list)
    # print('--'*45)
    # print(sigma_list)

analysis(block = False)
